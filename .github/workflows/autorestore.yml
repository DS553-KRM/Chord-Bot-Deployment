name: Auto Restore VM

on:
  workflow_dispatch:
  schedule:
    - cron: '*/5 * * * *'

jobs:
  restore:
    runs-on: [self-hosted, autorestore]   # must match the label you chose when configuring the runner
    steps:
      - name: Probe VM with local SSH keys
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_PORT: ${{ secrets.VM_PORT }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          set -e
          SSH="ssh -o BatchMode=yes -o ConnectTimeout=12 -o IdentitiesOnly=yes -p ${VM_PORT}"
          HOST="${VM_USER}@${VM_HOST}"

          PRIMARY="$HOME/.ssh/id_ed25519_vm_primary"
          FALLBACK="$HOME/.ssh/id_ed25519_vm_fallback"

          echo "Trying PRIMARY..."
          if $SSH -i "$PRIMARY" "$HOST" 'echo OK'; then
            echo "KEYFILE=$PRIMARY" >> $GITHUB_ENV
            exit 0
          fi

          if [[ -f "$FALLBACK" ]]; then
            echo "Trying FALLBACK..."
            if $SSH -i "$FALLBACK" "$HOST" 'echo OK'; then
              echo "KEYFILE=$FALLBACK" >> $GITHUB_ENV
              PUB=$(cat "$PRIMARY.pub")
              $SSH -i "$FALLBACK" "$HOST" "bash -lc 'mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys; \
                grep -qF \"$PUB\" ~/.ssh/authorized_keys || echo \"$PUB\" >> ~/.ssh/authorized_keys; \
                chmod 700 ~/.ssh; chmod 600 ~/.ssh/authorized_keys'"
              exit 0
            fi
          fi

          echo "VM offline or keys not accepted; will retry next schedule."
          exit 0

      - name: Run quickstart (idempotent)
        if: env.KEYFILE
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_PORT: ${{ secrets.VM_PORT }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_SUDO_PASSWORD: ${{ secrets.VM_SUDO_PASSWORD }}
        run: |
          set -e
          SSH="ssh -o BatchMode=yes -o ServerAliveInterval=15 -o ServerAliveCountMax=6 -o IdentitiesOnly=yes -p ${VM_PORT}"
          HOST="${VM_USER}@${VM_HOST}"
          $SSH -i "$KEYFILE" "$HOST" 'bash -lc "
            set -Eeuo pipefail
            echo [QS] fetch quickstart
            curl -fsSL https://raw.githubusercontent.com/DS553-KRM/Chord-Bot-Deployment/main/deploy/quickstart.sh -o /tmp/qs.sh
            chmod +x /tmp/qs.sh
            if sudo -n true 2>/dev/null; then
              echo [QS] passwordless sudo
              sudo /tmp/qs.sh
            elif [ -n \"\$VM_SUDO_PASSWORD\" ]; then
              echo [QS] askpass sudo
              export SUDO_ASKPASS=/tmp/askpass.sh
              printf \"#!/usr/bin/env bash\necho \\\"%s\\\"\\n\" \"\$VM_SUDO_PASSWORD\" > /tmp/askpass.sh
              chmod +x /tmp/askpass.sh
              sudo -A /tmp/qs.sh
            else
              echo [QS] no sudo
              /tmp/qs.sh
            fi
          "'

      - name: Probe services
        if: env.KEYFILE
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_PORT: ${{ secrets.VM_PORT }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          set -e
          SSH="ssh -o BatchMode=yes -o IdentitiesOnly=yes -p ${VM_PORT}"
          HOST="${VM_USER}@${VM_HOST}"
          $SSH -i "$KEYFILE" "$HOST" 'bash -lc "
            sudo systemctl --no-pager status chord-bot-api.service || true
            sudo ss -tulpn | grep -E \":(8000|7861)\\b\" || true
            curl -sSI http://localhost:8000 | head -n1 || true
          "'
